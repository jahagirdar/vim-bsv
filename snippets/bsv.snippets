snippet struct
	typedef struct { ${1:Bit#};
	} deriving(Bits,Eq);
snippet enum
	typedef enum { ${1:Bit#};
	} deriving(Bits,Eq);

snippet import
	import ${1:Standard}::*;
	${2}
snippet if
	if (${1}) begin
		${2}
	end
snippet for
	for (${1}) begin
		${2}
	end
snippet interface
	interface ${1:InterfaceName};
		${2}
	endinterface
snippet method
	method ${1:methodname} (${2});
		${3}
	endmethod
snippet function
	function ${1:functionname} (${2});
		${3}
	endfunction
snippet module
	interface Ifc_$1;
	method Action soft_reset();
	method Bool reset_done();
	endinterface
	import StmtFSM::*;
	(*synthesize*)
	module mk${1:modulename} (Ifc_$1);
		Reg#(Bool) rst_done <- mkRegA(False);
		${2}
		let reset=action
		rst_done <=True;
		endaction;
		Stmt stmt_$1=seq
			if (!rst_done)seq
				reset;
			endseq
		endseq;
		FSM fsm_$1 <- mkFSM(stmt_$1);
		rule rl_$1_fsm (fsm_$1.done() && (!rst_done));
			fsm_$1.start();
		endrule
		method Action soft_reset();
		rst_done <=False;
		endmethod
		method Bool reset_done();
		return rst_done;
		endmethod
	endmodule
snippet rule
	rule ${1:rulename};
		${2}
	endrule
snippet begin
	begin
	    ${1}
	end;
snippet case
	case (${1})
		${2}
	endcase
snippet instance
	instance ${1};
		${2}
	endinstance
snippet typeclass
	typeclass ${1};
		${2}
	endtypeclass
snippet action action
	action
	    ${1}
	endaction;
snippet action actionvalue
	actionvalue
	    ${1}
	endactionvalue;
snippet actionvalue
	actionvalue
		${1}
	endactionvalue;
snippet deriving
	deriving(Bits, Eq, FShow);
snippet package
	package ${1};
		${2}
	endpackage
snippet fsm
	import StmtFSM::*;
	Stmt ${1}_stmt=seq
	endseq;
	FSM $1 mkFSM($1_stmt);
	rule $1_rl ($1.done())
		$1.start();
	endrule

